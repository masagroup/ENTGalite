// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";
import "authentication_client.proto";

package sword;
option java_package = "net.masagroup.sword.proto";

// AuthenticationKeyRequest asks the simulation to generate an
// authentication token. The client can sign and resend it during login.
message AuthenticationKeyRequest {
}

message ConnectedProfilesRequest {
}

// AuthenticationRequest is sent from clients to the simulation to
// authenticate their connection and start interacting with the server.
// It is one of the few messages the simulation will accept from new
// un-authenticated connections.
message AuthenticationRequest {
    // The login uniquely identifies a profile loaded from
    // "exercise/profiles.xml" or dynamically created during the game.
    required string          login              = 1;
    required string          password           = 2;
    // The protocol version used by the client is compared to the
    // server protocol version in order to determine if protocols are
    // compatible. At this time, only the major number matters, client
    // and server one should be equal.
    required ProtocolVersion version            = 3;
    optional string          authentication_key = 4;
    // The token is used to authenticate the client with the cloud server. 
    optional string          token = 5;
    // The sync tells if the client wants to be synchronized with the sim
    // A synchronized client must force the simulation to wait for him via
    // the send of a CtrlDispatcherTickAck
    optional bool            sync = 6;
    // The virtual client is used to create a virtual connection
    // with the dispatcher via a parent client.
    optional bool            virtual_client = 7;
}

// DisconnectionRequest is sent from client to simulation to explicitely
// ask the server to terminate the connection.
//
// This message exists mostly for tests purpose. When connecting and
// disconnecting clients quickly, one can easily overflow the maximum number
// of client connections allowed, for the simulation may not notice
// immediately the disconnection. To ensure the connection counter is
// decreased once a client is done, send this message and wait for the
// network link to be terminated by the server.
message DisconnectionRequest {
    // The client id is used to disconnect a specific client.
    // It should be the same as the one provided
    // by the dispatcher when at authentication.
    optional int32 client_id = 1;
}

// ClientToAuthentication is the envelope for all authentication
// messages sent from client to simulation. Exactly one of its possible
// "message" value must be set.
message ClientToAuthentication {
    message Content {
        optional AuthenticationRequest     authentication_request      = 1;
        optional AuthenticationKeyRequest  authentication_key_request  = 7;
    }
    // context is a client-defined identifier, returned unchanged in
    // response messages. Use it to link requests to responses. Note
    // that authentication responses are never broadcast. Unlike other
    // messages, there is no risk one client context collides with
    // another client context.
    optional int32   context = 1;
    required Content message = 2;
}